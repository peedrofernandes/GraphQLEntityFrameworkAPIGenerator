
using GraphQL.Types;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using WP.Cooking.GESE.WebAPI.Models;
using GraphQL.DataLoader;
using WP.Cooking.GESE.WebAPI.Repositories; 


namespace WP.Cooking.GESE.WebAPI.GraphQL.Types
{
    public partial class CycleOptionsFullViewGraphType : ObjectGraphType<CycleOptionsFullView>
    {
        public CycleOptionsFullViewGraphType(GESECookingContext dbContext, IDataLoaderContextAccessor dataLoaderAccessor)
        {
            Field(t => t.CycleMappingDescription, type: typeof(StringGraphType), nullable: False);
			Field(t => t.Compartment0, type: typeof(ByteGraphType), nullable: False);
			Field(t => t.CycleName, type: typeof(StringGraphType), nullable: False);
			Field(t => t.KeyValue, type: typeof(LongGraphType), nullable: True);
			Field(t => t.KeyName0, type: typeof(StringGraphType), nullable: True);
			Field(t => t.ConnectivityCycleEnumeration0, type: typeof(IdGraphType), nullable: True);
			Field(t => t.EnumDescription, type: typeof(StringGraphType), nullable: True);
			Field(t => t.NumberOfModifiers, type: typeof(ByteGraphType), nullable: False);
			Field(t => t.Modifier1, type: typeof(StringGraphType), nullable: True);
			Field(t => t.Modifier1Value, type: typeof(StringGraphType), nullable: True);
			Field(t => t.Modifier2, type: typeof(StringGraphType), nullable: True);
			Field(t => t.Modifier2Value, type: typeof(StringGraphType), nullable: True);
			Field(t => t.CycleMapIndex, type: typeof(ByteGraphType), nullable: False);
			Field(t => t.CycleOptionsIndex, type: typeof(ByteGraphType), nullable: False);
			Field(t => t.IsConnected, type: typeof(BoolGraphType), nullable: False);
			Field(t => t.HmiCycleName, type: typeof(StringGraphType), nullable: True);
			Field(t => t.Version, type: typeof(FloatGraphType), nullable: False);
			Field(t => t.HexEncoding, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.Revision, type: typeof(IdGraphType), nullable: False);
			Field(t => t.CycleOptionsDescription, type: typeof(StringGraphType), nullable: False);
			Field(t => t.TemperatureSelectionBehavior, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.Upo, type: typeof(BoolGraphType), nullable: True);
			Field(t => t.TemperatureSelectionCelsiusMinimum, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.TemperatureSelectionCelsiusDefault, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.TemperatureSelectionCelsiusMaximum, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.MaximumStartTemperature, type: typeof(DoubleGraphType), nullable: True);
			Field(t => t.StepCelsius, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.StepFahrenheit, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.NumberOfTemperatureSelections, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.TemperatureSelection4, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.TemperatureSelection5, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.TemperatureSelection6, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.Units, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.TempSelectionName1, type: typeof(StringGraphType), nullable: True);
			Field(t => t.TempSelectionName2, type: typeof(StringGraphType), nullable: True);
			Field(t => t.TempSelectionName3, type: typeof(StringGraphType), nullable: True);
			Field(t => t.TemperatureSelectionDefaultName, type: typeof(StringGraphType), nullable: True);
			Field(t => t.TemperatureSelectionName3, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.TemperatureSelectionName4, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.TemperatureSelectionName5, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.TemperatureSelectionName6, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.NumberOfTimeSelections, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.UserCookTimeSelectionBehavior, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.UserCookTimeDisplayBehavior, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.UserCookTime1, type: typeof(IdGraphType), nullable: True);
			Field(t => t.UserCookTime2, type: typeof(IdGraphType), nullable: True);
			Field(t => t.UserCookTime3, type: typeof(IdGraphType), nullable: True);
			Field(t => t.UserCookTime4, type: typeof(IdGraphType), nullable: True);
			Field(t => t.UserCookTime5, type: typeof(IdGraphType), nullable: True);
			Field(t => t.UserCookTime6, type: typeof(IdGraphType), nullable: True);
			Field(t => t.Step, type: typeof(IdGraphType), nullable: True);
			Field(t => t.TimeUnits, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.UserCookTimeDefaultSelection, type: typeof(IdGraphType), nullable: True);
			Field(t => t.TimeSelectionName1, type: typeof(StringGraphType), nullable: True);
			Field(t => t.TimeSelectionName2, type: typeof(StringGraphType), nullable: True);
			Field(t => t.TimeSelectionName3, type: typeof(StringGraphType), nullable: True);
			Field(t => t.TimeSelectionNameDefault, type: typeof(StringGraphType), nullable: True);
			Field(t => t.TempSelectionCelsiusMin, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.TempSelectionCelsiusDefault, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.TempSelectionCelsiusMax, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.MeatProbeStepCelsius, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.MeatProbeStepFahrenheit, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.WeightSelectionMin, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.WeightSelectionDefault, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.WeightSelectionMax, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.WeightStep, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.SizeSelectionMin, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.SizeSelectionDefault, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.SizeSelectionMax, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.SizeStep, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.DonenessDefaultSelection, type: typeof(StringGraphType), nullable: True);
			Field(t => t.DonenessOption1, type: typeof(StringGraphType), nullable: True);
			Field(t => t.DonenessOption2, type: typeof(StringGraphType), nullable: True);
			Field(t => t.DonenessOption3, type: typeof(StringGraphType), nullable: True);
			Field(t => t.DonenessOption4, type: typeof(StringGraphType), nullable: True);
			Field(t => t.DonenessOption5, type: typeof(StringGraphType), nullable: True);
			Field(t => t.BrowningDefaultSelection, type: typeof(StringGraphType), nullable: True);
			Field(t => t.BrowningOption1, type: typeof(StringGraphType), nullable: True);
			Field(t => t.BrowningOption2, type: typeof(StringGraphType), nullable: True);
			Field(t => t.BrowningOption3, type: typeof(StringGraphType), nullable: True);
			Field(t => t.BrowningOption4, type: typeof(StringGraphType), nullable: True);
			Field(t => t.BrowningOption5, type: typeof(StringGraphType), nullable: True);
			Field(t => t.AmountMin, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.AmountDefault, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.AmountMax, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.AmountUnits, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.AmountStep, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.AmountDisplayUnits, type: typeof(StringGraphType), nullable: True);
			Field(t => t.NumberOfTimeBands, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.AddTime1, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.FrozenBakeTime1, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.AddTime2, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.FrozenBakeTime2, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.AddTime3, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.FrozenBakeTime3, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.AddTime4, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.FrozenBakeTime4, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.AddTime5, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.FrozenBakeTime5, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.AddTime6, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.FrozenBakeTime6, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.AddTime7, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.FrozenBakeTime7, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.AddTime8, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.FrozenBakeTime8, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.AddTime9, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.FrozenBakeTime9, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.AddTime10, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.TimeAdjustValue, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.TemperatureAdjustValue, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.AtEndDefault, type: typeof(StringGraphType), nullable: True);
			Field(t => t.HoldTemp, type: typeof(StringGraphType), nullable: True);
			Field(t => t.TurnOff, type: typeof(StringGraphType), nullable: True);
			Field(t => t.KeepWarm, type: typeof(StringGraphType), nullable: True);
			Field(t => t.UserEditable, type: typeof(BoolGraphType), nullable: True);
			Field(t => t.NoPreheat, type: typeof(StringGraphType), nullable: True);
			Field(t => t.Preheat, type: typeof(StringGraphType), nullable: True);
			Field(t => t.RapidPreheat, type: typeof(StringGraphType), nullable: True);
			Field(t => t.DisplayRampStepF, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.DisplayRampStepC, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.PreheatDefault, type: typeof(StringGraphType), nullable: True);
			Field(t => t.PanSizeDefault, type: typeof(StringGraphType), nullable: True);
			Field(t => t.PanSizeOption8, type: typeof(StringGraphType), nullable: True);
			Field(t => t.PanSizeOption9, type: typeof(StringGraphType), nullable: True);
			Field(t => t.PanSizeOption10, type: typeof(StringGraphType), nullable: True);
			Field(t => t.PanSizeOption8x8, type: typeof(StringGraphType), nullable: True);
			Field(t => t.PanSizeOption9x9, type: typeof(StringGraphType), nullable: True);
			Field(t => t.PanSizeOption9x13, type: typeof(StringGraphType), nullable: True);
			Field(t => t.DelayMin, type: typeof(IdGraphType), nullable: True);
			Field(t => t.DelayDefault, type: typeof(IdGraphType), nullable: True);
			Field(t => t.DelayMax, type: typeof(IdGraphType), nullable: True);
			Field(t => t.DelayStep, type: typeof(IdGraphType), nullable: True);
			Field(t => t.ConfigureMaxTemp, type: typeof(BoolGraphType), nullable: True);
			Field(t => t.NumberOfInputs, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.Constant, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.Coefficient1, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.Coefficient2, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.Coefficient3, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.Coefficient4, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.ResultingAttDescription, type: typeof(StringGraphType), nullable: True);
			Field(t => t.Input1Description, type: typeof(StringGraphType), nullable: True);
			Field(t => t.Input2Description, type: typeof(StringGraphType), nullable: True);
			Field(t => t.Input3Description, type: typeof(StringGraphType), nullable: True);
			Field(t => t.Input4Description, type: typeof(StringGraphType), nullable: True);
			Field(t => t.FormulaCycleName, type: typeof(StringGraphType), nullable: True);
			Field(t => t.AmountDiscreteUnits, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.AmountDiscreteNumberOfLevels, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.AmountDiscreteNumberOfDecimals, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.AmountDiscreteVersion, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.AmountDiscreteDefault, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.Amount1, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.Amount2, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.Amount3, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.Amount4, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.Amount5, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.Amount6, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.Amount7, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.Amount8, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.WeightRangesVersion, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.WeightRangesStep, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.WeightRangesDefault, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.WeightRangesNumberOfLevels, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.Weight1, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.Weight2, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.Weight3, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.Weight4, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.Weight5, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.Weight6, type: typeof(FloatGraphType), nullable: True);
			Field(t => t.PyroCompletePercent, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.CleanBackToBackTime, type: typeof(IdGraphType), nullable: True);
			Field(t => t.PowerLevelTypeSelection, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.MwoPowerLevelsMin, type: typeof(IdGraphType), nullable: True);
			Field(t => t.MwoPowerLevelsDefault, type: typeof(IdGraphType), nullable: True);
			Field(t => t.MwoPowerLevelsMax, type: typeof(IdGraphType), nullable: True);
			Field(t => t.MwoPowerLevelsStep, type: typeof(IdGraphType), nullable: True);
			Field(t => t.NumberOfTips, type: typeof(ByteGraphType), nullable: True);
			Field(t => t.TipKey1, type: typeof(StringGraphType), nullable: True);
			Field(t => t.TipValue1, type: typeof(StringGraphType), nullable: True);
			Field(t => t.TipKey2, type: typeof(StringGraphType), nullable: True);
			Field(t => t.TipValue2, type: typeof(StringGraphType), nullable: True);
			Field(t => t.TipKey3, type: typeof(StringGraphType), nullable: True);
			Field(t => t.TipValue3, type: typeof(StringGraphType), nullable: True);
			Field(t => t.TipKey4, type: typeof(StringGraphType), nullable: True);
			Field(t => t.TipValue4, type: typeof(StringGraphType), nullable: True);
			Field(t => t.TipKey5, type: typeof(StringGraphType), nullable: True);
			Field(t => t.TipValue5, type: typeof(StringGraphType), nullable: True);
			Field(t => t.FoodTypeDefault, type: typeof(StringGraphType), nullable: True);
            
        }
    }
}
            